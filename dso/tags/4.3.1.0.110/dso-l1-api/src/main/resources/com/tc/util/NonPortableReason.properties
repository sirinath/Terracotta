# 
# The contents of this file are subject to the Terracotta Public License Version
# 2.0 (the "License"); You may not use this file except in compliance with the
# License. You may obtain a copy of the License at 
#
#      http://terracotta.org/legal/terracotta-public-license.
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
#
# The Covered Software is Terracotta Platform.
#
# The Initial Developer of the Covered Software is 
#      Terracotta, Inc., a Software AG company
# 
classNotAdaptable.root.instructions : \n\
        Action to take:\n\n\
        1) Change your application code\n\
       \   * Ensure that no instances or subclass instances of {1}\n\
       \     are assigned to the DSO root: {0}\n\n

classNotAdaptable.field.instructions : \n\
        Action to take:\n\n\
        1) Change your application code\n\
       \   * Ensure that no instances of {1}\n\
       \     are added to any shared object graph\n\
       \n\
       \   - OR -\n\
       \n\
        2) Mark the offending field as transient (and thus not shared)\n\
       \   * edit your tc-config.xml file\n\
       \   * locate the <dso> element\n\
       \   * add this snippet inside the <dso> element, above the <locks> element\n\n\
       \       <transient-fields>\n\
       \         <field-name>{0}</field-name>\n\
       \       </transient-fields>\n\n\
       \   * if there is already a <transient-fields> element present, simply add\n\
       \     the new field inside it\n\n

################################################################################
# SUPER_CLASS_NOT_ADAPTABLE: First argument is the field being set, the second
#                            is the subclass type of the object used to set, and
#                            the third is a list of superclass names of the
#                            un-sharable object type
superClassNotAdaptable.root.instructions : \n\
        Action to take:\n\n\
        1) Change your application code\n\
       \   * Ensure that no instances of {1}\n\
       \     nor any other subclass instances of the classes:\n\
       \       {2}\n\
       \     are assigned to the DSO root: {0}\n\n

superClassNotAdaptable.field.instructions : \n\
        Action to take:\n\n\
        1) Change your application code\n\
       \   * Ensure that no instances of {1}\n\
       \     nor any other subclass instances of the classes:\n\
       \       {2}\n\
       \     are added to any shared object graph\n\
       \n\
       \   - OR -\n\
       \n\
        2) Mark the offending field as transient (and thus not shared)\n\
       \   * edit your tc-config.xml file\n\
       \   * locate the <dso> element\n\
       \   * add this snippet inside the <dso> element, above the <locks> element\n\n\
       \       <transient-fields>\n\
       \         <field-name>{0}</field-name>\n\
       \       </transient-fields>\n\n\
       \   * if there is already a <transient-fields> element present, simply add\n\
       \     the new field inside it\n\n

################################################################################
# SUBCLASS_OF_LOGICALLY_MANAGED_CLASS: First argument is the field being set,
#                            the second is the subclass type of the object used
#                            to set, and the third is a list of logically
#                            managed superclass names
logicallyManagedSuperClass.root.instructions : \n\
        Action to take:\n\n\
        1) Change your application code\n\
       \   * Ensure that no instances of {1}\n\
       \     nor any other subclasses of the logically managed classes:\n\
       \       {2}\n\
       \     are assigned to the DSO root: {0}\n\n

logicallyManagedSuperClass.field.instructions : \n\
        Action to take:\n\n\
        1) Change your application code\n\
       \   * Ensure that no instances of {1}\n\
       \     nor any other subclasses of the logically managed classes:\n\
       \       {2}\n\
       \     are added to any shared object graph\n\
       \n\
       \   - OR -\n\
       \n\
        2) Mark the offending field as transient (and thus not shared)\n\
       \   * edit your tc-config.xml file\n\
       \   * locate the <dso> element\n\
       \   * add this snippet inside the <dso> element, above the <locks> element\n\n\
       \       <transient-fields>\n\
       \         <field-name>{0}</field-name>\n\
       \       </transient-fields>\n\n\
       \   * if there is already a <transient-fields> element present, simply add\n\
       \     the new field inside it\n\n

################################################################################
# CLASS_NOT_IN_BOOT_JAR: each class name not in the boot jar will be run
#                        through "classNotInBootJar.class" and appended as a
#                        single string to be passed as an argument to
#                        "classNotInBootJar.instructions"
classNotInBootJar.info : \n\
    Under most circumstances, you should only be adding classes for your\n\
    application. If you are adding classes for frameworks or code not written by\n\
    you, then you should consider finding a Terracotta Integration Module (TIM)\n\
    that matches the framework you are using.\n\
    \n\
    As an example, if the non-portable class listed below is\n\
    net.sf.ehcache.CacheManager, you should consider using the ehcache TIM.\n\
    \n\
    It is possible that this class is truly non-portable, the solution is then to\n\
    mark the referring field as transient.\n\
    For more information on non-portable classes see the Troubleshooting Guide.\n

classNotInBootJar.class : \        <include>{0}</include>\n
classNotInBootJar.instructions : \n\
        Action to take:\n\n\
        1) Reconfigure and rebuild the boot jar\n\
       \   * edit your tc-config.xml file\n\
       \   * locate the <dso> element\n\
       \   * add this snippet inside the <dso> element\n\n\
       \       <additional-boot-jar-classes>\n\
        {0}\
       \       </additional-boot-jar-classes>\n\n\
       \   * if there is already an <additional-boot-jar-classes> element present, simply add\n\
       \     the new includes inside it\n\
       \   * Recreate the boot jar by running the ''make-boot-jar'' tool in the bin/ directory\n\n

################################################################################
# CLASS_NOT_INCLUDED_IN_CONFIG: This one is complex -- the header/footer do not
#                         take any arguments.  For boot-jar and non-boot-jar
#                         classes that need to be included, the appropriate
#                         messages will be queried, the ".class" run for each
#                         class name and appended one after the other, the
#                         resulting string is then passed as the argument to the
#                         appropriate ".instructions" as a single argument
classNotIncludedInConfig.info : \n\
    Under most circumstances, you should only be adding classes for your\n\
    application. If you are adding classes for frameworks or code not written by\n\
    you, then you should consider finding a Terracotta Integration Module (TIM)\n\
    that matches the framework you are using.\n\
    \n\
    As an example, if the non-portable class listed below is\n\
    net.sf.ehcache.CacheManager, you should consider using the ehcache TIM.\n\
    \n\
    It is also possible that some or all of the classes above are truly\n\
    non-portable, the solution is then to mark the referring field as transient.\n\
    For more information on non-portable classes see the Troubleshooting Guide.\n\

classNotIncludedInConfig.header : \n\
        Action to take:\n\n\
        1) Reconfigure to include the unshareable classes\n\
       \   * edit your tc-config.xml file\n\
       \   * locate the <dso> element\n
classNotIncludedInConfig.non-bootjar.class : \         <include>\n\
                                             \           <class-expression>{0}</class-expression>\n\
                                             \         </include>\n
classNotIncludedInConfig.non-bootjar.instructions : \
       \   * add this snippet inside the <dso> element\n\n\
       \       <instrumented-classes>\n\
        {0}\
       \       </instrumented-classes>\n\n\
       \   * if there is already an <instrumented-classes> element present, simply add\n\
       \     the new includes inside it\n
classNotIncludedInConfig.bootjar.class : \         <include>{0}</include>\n
classNotIncludedInConfig.bootjar.instructions : \
       \   * add this snippet inside the <dso> element\n\n\
       \       <additional-boot-jar-classes>\n\
        {0}\
       \       </additional-boot-jar-classes>\n\n\
       \   * if there is already an <additional-boot-jar-classes> element present, simply add\n\
       \     the new includes inside it\n\
       \   * Recreate the boot jar by running the ''make-boot-jar'' tool in the bin/ directory\n

################################################################################
# SUPER_CLASS_NOT_INSTRUMENTED: This one is just like CLASS_NOT_INCLUDED_IN_CONFIG
superClassNotInstrumented.info : \n\
    Under most circumstances, you should only be adding classes for your\n\
    application. If you are adding classes for frameworks or code not written by\n\
    you, then you should consider finding a Terracotta Integration Module (TIM)\n\
    that matches the framework you are using.\n\
    \n\
    As an example, if the non-portable class listed below is\n\
    net.sf.ehcache.CacheManager, you should consider using the ehcache TIM.\n\
    \n\
    It is possible that some or all of the super classes above are truly\n\
    non-portable, the solution is then to mark the referring field(s) as\n\
    transient.\n\n
    For more information on non-portable classes see the Troubleshooting Guide.\n
superClassNotInstrumented.header : \n\
        Action to take:\n\n\
        1) Reconfigure to include the unshareable super-class(es)\n\
       \   * edit your tc-config.xml file\n\
       \   * locate the <dso> element\n
superClassNotInstrumented.non-bootjar.class : \         <include>\n\
                                              \           <class-expression>{0}</class-expression>\n\
                                              \         </include>\n
superClassNotInstrumented.non-bootjar.instructions : \
       \   * add this snippet inside the <dso> element\n\n\
       \       <instrumented-classes>\n\
        {0}\
       \       </instrumented-classes>\n\n\
       \   * if there is already an <instrumented-classes> element present, simply add\n\
       \     the new includes inside it\n
superClassNotInstrumented.bootjar.class : \         <include>{0}</include>\n
superClassNotInstrumented.bootjar.instructions : \
       \   * add this snippet inside the <dso> element\n\n\
       \       <additional-boot-jar-classes>\n\
        {0}\
       \       </additional-boot-jar-classes>\n\n\
       \   * if there is already an <additional-boot-jar-classes> element present, simply add\n\
       \     the new includes inside it\n\
       \   * Recreate the boot jar by running the ''make-boot-jar'' tool in the bin/ directory\n
