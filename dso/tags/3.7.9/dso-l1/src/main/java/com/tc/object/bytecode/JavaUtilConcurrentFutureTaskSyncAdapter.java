/*
 * All content copyright (c) 2003-2008 Terracotta, Inc., except as may otherwise be noted in a separate copyright notice.  All rights reserved.
 */
package com.tc.object.bytecode;

import com.tc.asm.ClassAdapter;
import com.tc.asm.ClassVisitor;
import com.tc.asm.FieldVisitor;
import com.tc.asm.Label;
import com.tc.asm.MethodAdapter;
import com.tc.asm.MethodVisitor;
import com.tc.asm.Opcodes;

public class JavaUtilConcurrentFutureTaskSyncAdapter implements Opcodes {
  public static class JavaUtilConcurrentFutureTaskSyncClassAdapter extends ClassAdapter implements Opcodes {
    private final static String MANAGED_OBJECT_LOCK_FIELD_NAME              = "managedLock";
    private final static String PROXY_RUNNER_FIELD_NAME                     = "proxyRunner";
    private final static String MAANGED_INNER_CANCEL_METHOD_NAME            = "managedInnerCancel";
    private final static String MANAGED_INNER_SET_METHOD_NAME               = "managedInnerSet";
    private final static String MANAGED_TRY_RELEASE_SHARED_METHOD           = "managedTryReleaseShared";
    //private final static String MANAGED_RELEASE_SHARED                      = "managedReleaseShared";

    public JavaUtilConcurrentFutureTaskSyncClassAdapter(ClassVisitor cv) {
      super(cv);
    }

    public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
      if ("runner".equals(name) && "Ljava/lang/Thread;".equals(desc)) {
        access += ACC_TRANSIENT;
      }
      return super.visitField(access, name, desc, signature, value);
    }

    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
      MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);
      if ("<init>".equals(name)) {
        mv = new Constructor(mv);
      } else if ("innerGet".equals(name) && "()Ljava/lang/Object;".equals(desc)) {
        return rewriteInnerGetMethod(mv);
      } else if ("innerGet".equals(name) && "(J)Ljava/lang/Object;".equals(desc)) {
        return rewriteTimedInnerGetMethod(mv);
      } else if ("innerSet".equals(name)) {
        return rewriteInnerSetMethod(mv);
      } else if ("innerSetException".equals(name)) {
        return rewriteInnerSetExceptionMethod(mv);
      } else if ("innerCancel".equals(name)) {
        return rewriteInnerCancelMethod(mv);
      } else if ("innerIsDone".equals(name)) {
        return rewriteInnerIsDoneMethod(mv);
      } else if ("innerRun".equals(name)) {
        return rewriteInnerRunMethod(mv);
      } else if ("tryReleaseShared".equals(name)) {
        return rewriteTryReleaseSharedMethod(mv);
      }

      return mv;
    }

    public void visitEnd() {
      addManagedLockField();
      addProxyRunnerField();
      addManagedInnerCancelMethod();
      addManagedTryReleaseSharedMethod();
      //addManagedReleaseSharedMethod();
      //addTryManagedReleaseMethod();
      addManagedInnerSetMethod();
      super.visitEnd();
    }

    private void addManagedLockField() {
      cv.visitField(ACC_PRIVATE + ACC_SYNTHETIC, MANAGED_OBJECT_LOCK_FIELD_NAME, "Ljava/lang/Object;", null, null);
    }

    private void addProxyRunnerField() {
      cv.visitField(ACC_PRIVATE + ACC_VOLATILE + ACC_SYNTHETIC, PROXY_RUNNER_FIELD_NAME, "Ljava/lang/Object;", null, null);
    }

    private void addManagedInnerSetMethod() {
      MethodVisitor mv = cv.visitMethod(0, MANAGED_INNER_SET_METHOD_NAME, "(Ljava/lang/Object;)V", null, null);
      mv.visitCode();
      Label l0 = new Label();
      mv.visitLabel(l0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitVarInsn(ISTORE, 2);
      Label l1 = new Label();
      mv.visitLabel(l1);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ILOAD, 2);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "ranOrCancelled", "(I)Z");
      Label l2 = new Label();
      mv.visitJumpInsn(IFEQ, l2);
      mv.visitInsn(RETURN);
      mv.visitLabel(l2);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ICONST_2);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "setState", "(I)V");
      Label l3 = new Label();
      mv.visitLabel(l3);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", "result", "Ljava/lang/Object;");
      Label l4 = new Label();
      mv.visitLabel(l4);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "managedTryReleaseShared", "()Z");
      mv.visitInsn(POP);
      Label l5 = new Label();
      mv.visitLabel(l5);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "this$0", "Ljava/util/concurrent/FutureTask;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask", "done", "()V");
      Label l6 = new Label();
      mv.visitLabel(l6);
      mv.visitInsn(RETURN);
      Label l7 = new Label();
      mv.visitLabel(l7);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    private MethodVisitor rewriteTryReleaseSharedMethod(MethodVisitor mv) {
      mv.visitCode();
      Label l0 = new Label();
      mv.visitLabel(l0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "managedTryReleaseShared", "()Z");
      mv.visitInsn(POP);
      Label l1 = new Label();
      mv.visitLabel(l1);
      mv.visitInsn(ICONST_1);
      mv.visitInsn(IRETURN);
      Label l2 = new Label();
      mv.visitLabel(l2);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
      return null;
    }

    private MethodVisitor rewriteInnerRunMethod(MethodVisitor mv) {
      mv.visitCode();
      Label l0 = new Label();
      Label l1 = new Label();
      Label l2 = new Label();
      mv.visitTryCatchBlock(l0, l1, l2, null);
      Label l3 = new Label();
      mv.visitTryCatchBlock(l2, l3, l2, null);
      Label l4 = new Label();
      Label l5 = new Label();
      Label l6 = new Label();
      mv.visitTryCatchBlock(l4, l5, l6, null);
      Label l7 = new Label();
      mv.visitTryCatchBlock(l6, l7, l6, null);
      Label l8 = new Label();
      Label l9 = new Label();
      Label l10 = new Label();
      mv.visitTryCatchBlock(l8, l9, l10, null);
      Label l11 = new Label();
      mv.visitTryCatchBlock(l10, l11, l10, null);
      Label l12 = new Label();
      Label l13 = new Label();
      mv.visitTryCatchBlock(l12, l13, l13, "java/lang/Throwable");
      Label l14 = new Label();
      Label l15 = new Label();
      mv.visitTryCatchBlock(l14, l15, l15, "java/lang/Throwable");
      Label l16 = new Label();
      mv.visitLabel(l16);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ICONST_0);
      mv.visitInsn(ICONST_1);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "compareAndSetState", "(II)Z");
      Label l17 = new Label();
      mv.visitJumpInsn(IFNE, l17);
      mv.visitInsn(RETURN);
      mv.visitLabel(l17);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "this$0", "Ljava/util/concurrent/FutureTask;");
      mv.visitMethodInsn(INVOKESTATIC, "com/tc/object/bytecode/ManagerUtil", "isManaged", "(Ljava/lang/Object;)Z");
      mv.visitJumpInsn(IFEQ, l14);
      mv.visitLabel(l12);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;");
      mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", "runner", "Ljava/lang/Thread;");
      Label l18 = new Label();
      mv.visitLabel(l18);
      mv.visitInsn(ICONST_0);
      mv.visitVarInsn(ISTORE, 1);
      Label l19 = new Label();
      mv.visitLabel(l19);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 2);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "runner", "Ljava/lang/Thread;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "toString", "()Ljava/lang/String;");
      mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", "proxyRunner", "Ljava/lang/Object;");
      Label l20 = new Label();
      mv.visitLabel(l20);
      /*mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
      mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
      mv.visitInsn(DUP);
      mv.visitLdcInsn("InnerRun state1: ");
      mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "(Ljava/lang/String;)V");
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");

      Label l21 = new Label();
      mv.visitLabel(l21);
      mv.visitLdcInsn(Long.valueOf(10L));
      mv.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "sleep", "(J)V");
      Label l22 = new Label();
      mv.visitLabel(l22);
      mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
      mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
      mv.visitInsn(DUP);
      mv.visitLdcInsn("InnerRun state2: ");
      mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "(Ljava/lang/String;)V");
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
      */
      Label l23 = new Label();
      mv.visitLabel(l23);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitInsn(ICONST_1);
      Label l24 = new Label();
      mv.visitJumpInsn(IF_ICMPNE, l24);
      mv.visitInsn(ICONST_1);
      Label l25 = new Label();
      mv.visitJumpInsn(GOTO, l25);
      mv.visitLabel(l24);
      mv.visitInsn(ICONST_0);
      mv.visitLabel(l25);
      mv.visitVarInsn(ISTORE, 1);
      Label l26 = new Label();
      mv.visitLabel(l26);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l1);
      Label l27 = new Label();
      mv.visitJumpInsn(GOTO, l27);
      mv.visitLabel(l2);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l3);
      mv.visitInsn(ATHROW);
      mv.visitLabel(l27);
      mv.visitVarInsn(ILOAD, 1);
      Label l28 = new Label();
      mv.visitJumpInsn(IFEQ, l28);
      Label l29 = new Label();
      mv.visitLabel(l29);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "callable", "Ljava/util/concurrent/Callable;");
      mv.visitMethodInsn(INVOKEINTERFACE, "java/util/concurrent/Callable", "call", "()Ljava/lang/Object;");
      mv.visitVarInsn(ASTORE, 2);
      Label l30 = new Label();
      mv.visitLabel(l30);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 3);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l4);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "managedInnerSet", "(Ljava/lang/Object;)V");
      Label l31 = new Label();
      mv.visitLabel(l31);
      mv.visitVarInsn(ALOAD, 3);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l5);
      Label l32 = new Label();
      mv.visitJumpInsn(GOTO, l32);
      mv.visitLabel(l6);
      mv.visitVarInsn(ALOAD, 3);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l7);
      mv.visitInsn(ATHROW);
      mv.visitJumpInsn(GOTO, l32);
      mv.visitLabel(l28);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 2);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l8);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "managedTryReleaseShared", "()Z");
      mv.visitInsn(POP);
      Label l33 = new Label();
      mv.visitLabel(l33);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l9);
      mv.visitJumpInsn(GOTO, l32);
      mv.visitLabel(l10);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l11);
      mv.visitInsn(ATHROW);
      mv.visitJumpInsn(GOTO, l32);
      mv.visitLabel(l13);
      mv.visitVarInsn(ASTORE, 1);
      Label l34 = new Label();
      mv.visitLabel(l34);
      /*mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
      mv.visitLdcInsn("Catching Throwable in innerRun.");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
      */
      Label l35 = new Label();
      mv.visitLabel(l35);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "innerSetException", "(Ljava/lang/Throwable;)V");
      Label l36 = new Label();
      mv.visitLabel(l36);
      mv.visitJumpInsn(GOTO, l32);
      mv.visitLabel(l14);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;");
      mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", "runner", "Ljava/lang/Thread;");
      Label l37 = new Label();
      mv.visitLabel(l37);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "callable", "Ljava/util/concurrent/Callable;");
      mv.visitMethodInsn(INVOKEINTERFACE, "java/util/concurrent/Callable", "call", "()Ljava/lang/Object;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "innerSet", "(Ljava/lang/Object;)V");
      mv.visitJumpInsn(GOTO, l32);
      mv.visitLabel(l15);
      mv.visitVarInsn(ASTORE, 1);
      Label l38 = new Label();
      mv.visitLabel(l38);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "innerSetException", "(Ljava/lang/Throwable;)V");
      mv.visitLabel(l32);
      mv.visitInsn(RETURN);
      Label l39 = new Label();
      mv.visitLabel(l39);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
      return null;
    }

    private MethodVisitor rewriteInnerIsDoneMethod(MethodVisitor mv) {
      mv.visitCode();
      Label l0 = new Label();
      Label l1 = new Label();
      Label l2 = new Label();
      mv.visitTryCatchBlock(l0, l1, l2, null);
      Label l3 = new Label();
      mv.visitTryCatchBlock(l2, l3, l2, null);
      Label l4 = new Label();
      mv.visitLabel(l4);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "this$0", "Ljava/util/concurrent/FutureTask;");
      mv.visitMethodInsn(INVOKESTATIC, "com/tc/object/bytecode/ManagerUtil", "isManaged", "(Ljava/lang/Object;)Z");
      Label l5 = new Label();
      mv.visitJumpInsn(IFEQ, l5);
      Label l6 = new Label();
      mv.visitLabel(l6);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 1);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "ranOrCancelled", "(I)Z");
      Label l7 = new Label();
      mv.visitJumpInsn(IFEQ, l7);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "proxyRunner", "Ljava/lang/Object;");
      mv.visitJumpInsn(IFNONNULL, l7);
      mv.visitInsn(ICONST_1);
      Label l8 = new Label();
      mv.visitJumpInsn(GOTO, l8);
      mv.visitLabel(l7);
      mv.visitInsn(ICONST_0);
      mv.visitLabel(l8);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l1);
      mv.visitInsn(IRETURN);
      mv.visitLabel(l2);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l3);
      mv.visitInsn(ATHROW);
      mv.visitLabel(l5);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "ranOrCancelled", "(I)Z");
      Label l9 = new Label();
      mv.visitJumpInsn(IFEQ, l9);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "runner", "Ljava/lang/Thread;");
      mv.visitJumpInsn(IFNONNULL, l9);
      mv.visitInsn(ICONST_1);
      mv.visitInsn(IRETURN);
      mv.visitLabel(l9);
      mv.visitInsn(ICONST_0);
      mv.visitInsn(IRETURN);
      Label l10 = new Label();
      mv.visitLabel(l10);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
      return null;
    }

    private MethodVisitor rewriteInnerSetExceptionMethod(MethodVisitor mv) {
      mv.visitCode();
      Label l0 = new Label();
      Label l1 = new Label();
      Label l2 = new Label();
      mv.visitTryCatchBlock(l0, l1, l2, null);
      Label l3 = new Label();
      Label l4 = new Label();
      mv.visitTryCatchBlock(l3, l4, l2, null);
      Label l5 = new Label();
      mv.visitTryCatchBlock(l2, l5, l2, null);
      Label l6 = new Label();
      Label l7 = new Label();
      Label l8 = new Label();
      mv.visitTryCatchBlock(l6, l7, l8, null);
      Label l9 = new Label();
      mv.visitTryCatchBlock(l8, l9, l8, null);
      Label l10 = new Label();
      mv.visitLabel(l10);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "this$0", "Ljava/util/concurrent/FutureTask;");
      mv.visitMethodInsn(INVOKESTATIC, "com/tc/object/bytecode/ManagerUtil", "isManaged", "(Ljava/lang/Object;)Z");
      Label l11 = new Label();
      mv.visitJumpInsn(IFEQ, l11);
      Label l12 = new Label();
      mv.visitLabel(l12);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 2);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitVarInsn(ISTORE, 3);
      Label l13 = new Label();
      mv.visitLabel(l13);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ILOAD, 3);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "ranOrCancelled", "(I)Z");
      mv.visitJumpInsn(IFEQ, l3);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l1);
      mv.visitInsn(RETURN);
      mv.visitLabel(l3);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ICONST_2);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "setState", "(I)V");
      Label l14 = new Label();
      mv.visitLabel(l14);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", "exception", "Ljava/lang/Throwable;");
      Label l15 = new Label();
      mv.visitLabel(l15);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ACONST_NULL);
      mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", "result", "Ljava/lang/Object;");
      Label l16 = new Label();
      mv.visitLabel(l16);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "managedTryReleaseShared", "()Z");
      mv.visitInsn(POP);
      Label l17 = new Label();
      mv.visitLabel(l17);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "this$0", "Ljava/util/concurrent/FutureTask;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask", "done", "()V");
      Label l18 = new Label();
      mv.visitLabel(l18);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l4);
      Label l19 = new Label();
      mv.visitJumpInsn(GOTO, l19);
      mv.visitLabel(l2);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l5);
      mv.visitInsn(ATHROW);
      Label l20 = new Label();
      mv.visitLabel(l20);
      mv.visitJumpInsn(GOTO, l19);
      mv.visitLabel(l11);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitVarInsn(ISTORE, 2);
      Label l21 = new Label();
      mv.visitLabel(l21);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ILOAD, 2);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "ranOrCancelled", "(I)Z");
      Label l22 = new Label();
      mv.visitJumpInsn(IFEQ, l22);
      mv.visitInsn(RETURN);
      mv.visitLabel(l22);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ILOAD, 2);
      mv.visitInsn(ICONST_2);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "compareAndSetState", "(II)Z");
      mv.visitJumpInsn(IFEQ, l11);
      Label l23 = new Label();
      mv.visitJumpInsn(GOTO, l23);
      Label l24 = new Label();
      mv.visitLabel(l24);
      mv.visitJumpInsn(GOTO, l11);
      mv.visitLabel(l23);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", "exception", "Ljava/lang/Throwable;");
      Label l25 = new Label();
      mv.visitLabel(l25);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ACONST_NULL);
      mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", "result", "Ljava/lang/Object;");
      Label l26 = new Label();
      mv.visitLabel(l26);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 2);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l6);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ICONST_0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "releaseShared", "(I)Z");
      mv.visitInsn(POP);
      Label l27 = new Label();
      mv.visitLabel(l27);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l7);
      Label l28 = new Label();
      mv.visitJumpInsn(GOTO, l28);
      mv.visitLabel(l8);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l9);
      mv.visitInsn(ATHROW);
      mv.visitLabel(l28);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "this$0", "Ljava/util/concurrent/FutureTask;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask", "done", "()V");
      mv.visitLabel(l19);
      mv.visitInsn(RETURN);
      Label l29 = new Label();
      mv.visitLabel(l29);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
      return null;
    }

    private MethodVisitor rewriteInnerSetMethod(MethodVisitor mv) {
      mv.visitCode();
      Label l0 = new Label();
      Label l1 = new Label();
      Label l2 = new Label();
      mv.visitTryCatchBlock(l0, l1, l2, null);
      Label l3 = new Label();
      mv.visitTryCatchBlock(l2, l3, l2, null);
      Label l4 = new Label();
      Label l5 = new Label();
      Label l6 = new Label();
      mv.visitTryCatchBlock(l4, l5, l6, null);
      Label l7 = new Label();
      mv.visitTryCatchBlock(l6, l7, l6, null);
      Label l8 = new Label();
      mv.visitLabel(l8);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "this$0", "Ljava/util/concurrent/FutureTask;");
      mv.visitMethodInsn(INVOKESTATIC, "com/tc/object/bytecode/ManagerUtil", "isManaged", "(Ljava/lang/Object;)Z");
      Label l9 = new Label();
      mv.visitJumpInsn(IFEQ, l9);
      Label l10 = new Label();
      mv.visitLabel(l10);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 2);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "managedInnerSet", "(Ljava/lang/Object;)V");
      Label l11 = new Label();
      mv.visitLabel(l11);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l1);
      Label l12 = new Label();
      mv.visitJumpInsn(GOTO, l12);
      mv.visitLabel(l2);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l3);
      mv.visitInsn(ATHROW);
      mv.visitJumpInsn(GOTO, l12);
      mv.visitLabel(l9);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitVarInsn(ISTORE, 2);
      Label l13 = new Label();
      mv.visitLabel(l13);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ILOAD, 2);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "ranOrCancelled", "(I)Z");
      Label l14 = new Label();
      mv.visitJumpInsn(IFEQ, l14);
      mv.visitInsn(RETURN);
      mv.visitLabel(l14);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ILOAD, 2);
      mv.visitInsn(ICONST_2);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "compareAndSetState", "(II)Z");
      mv.visitJumpInsn(IFEQ, l9);
      Label l15 = new Label();
      mv.visitJumpInsn(GOTO, l15);
      Label l16 = new Label();
      mv.visitLabel(l16);
      mv.visitJumpInsn(GOTO, l9);
      mv.visitLabel(l15);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", "result", "Ljava/lang/Object;");
      Label l17 = new Label();
      mv.visitLabel(l17);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 2);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l4);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ICONST_0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "releaseShared", "(I)Z");
      mv.visitInsn(POP);
      Label l18 = new Label();
      mv.visitLabel(l18);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l5);
      Label l19 = new Label();
      mv.visitJumpInsn(GOTO, l19);
      mv.visitLabel(l6);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l7);
      mv.visitInsn(ATHROW);
      mv.visitLabel(l19);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "this$0", "Ljava/util/concurrent/FutureTask;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask", "done", "()V");
      mv.visitLabel(l12);
      mv.visitInsn(RETURN);
      Label l20 = new Label();
      mv.visitLabel(l20);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
      return null;
    }

    private MethodVisitor rewriteTimedInnerGetMethod(MethodVisitor mv) {
      mv.visitCode();
      Label l0 = new Label();
      Label l1 = new Label();
      Label l2 = new Label();
      mv.visitTryCatchBlock(l0, l1, l2, null);
      Label l3 = new Label();
      mv.visitTryCatchBlock(l2, l3, l2, null);
      Label l4 = new Label();
      mv.visitLabel(l4);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "this$0", "Ljava/util/concurrent/FutureTask;");
      mv.visitMethodInsn(INVOKESTATIC, "com/tc/object/bytecode/ManagerUtil", "isManaged", "(Ljava/lang/Object;)Z");
      Label l5 = new Label();
      mv.visitJumpInsn(IFEQ, l5);
      Label l6 = new Label();
      mv.visitLabel(l6);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 3);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l0);
      mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "nanoTime", "()J");
      mv.visitVarInsn(LSTORE, 4);
      Label l7 = new Label();
      mv.visitLabel(l7);
      Label l8 = new Label();
      mv.visitJumpInsn(GOTO, l8);
      Label l9 = new Label();
      mv.visitLabel(l9);
      mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "NANOSECONDS", "Ljava/util/concurrent/TimeUnit;");
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitVarInsn(LLOAD, 1);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/TimeUnit", "timedWait", "(Ljava/lang/Object;J)V");
      Label l10 = new Label();
      mv.visitLabel(l10);
      mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "nanoTime", "()J");
      mv.visitVarInsn(LSTORE, 6);
      Label l11 = new Label();
      mv.visitLabel(l11);
      mv.visitVarInsn(LLOAD, 1);
      mv.visitVarInsn(LLOAD, 6);
      mv.visitVarInsn(LLOAD, 4);
      mv.visitInsn(LSUB);
      mv.visitInsn(LSUB);
      mv.visitVarInsn(LSTORE, 1);
      mv.visitLabel(l8);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ICONST_0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "tryAcquireShared", "(I)I");
      Label l12 = new Label();
      mv.visitJumpInsn(IFGE, l12);
      mv.visitVarInsn(LLOAD, 1);
      mv.visitInsn(LCONST_0);
      mv.visitInsn(LCMP);
      mv.visitJumpInsn(IFGT, l9);
      mv.visitLabel(l12);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ICONST_0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "tryAcquireShared", "(I)I");
      Label l13 = new Label();
      mv.visitJumpInsn(IFGE, l13);
      mv.visitTypeInsn(NEW, "java/util/concurrent/TimeoutException");
      mv.visitInsn(DUP);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/TimeoutException", "<init>", "()V");
      mv.visitInsn(ATHROW);
      mv.visitLabel(l13);
      mv.visitVarInsn(ALOAD, 3);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l1);
      Label l14 = new Label();
      mv.visitJumpInsn(GOTO, l14);
      mv.visitLabel(l2);
      mv.visitVarInsn(ALOAD, 3);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l3);
      mv.visitInsn(ATHROW);
      Label l15 = new Label();
      mv.visitLabel(l15);
      mv.visitJumpInsn(GOTO, l14);
      mv.visitLabel(l5);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ICONST_0);
      mv.visitVarInsn(LLOAD, 1);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "tryAcquireSharedNanos", "(IJ)Z");
      mv.visitJumpInsn(IFNE, l14);
      mv.visitTypeInsn(NEW, "java/util/concurrent/TimeoutException");
      mv.visitInsn(DUP);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/TimeoutException", "<init>", "()V");
      mv.visitInsn(ATHROW);
      mv.visitLabel(l14);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitInsn(ICONST_4);
      Label l16 = new Label();
      mv.visitJumpInsn(IF_ICMPNE, l16);
      mv.visitTypeInsn(NEW, "java/util/concurrent/CancellationException");
      mv.visitInsn(DUP);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/CancellationException", "<init>", "()V");
      mv.visitInsn(ATHROW);
      mv.visitLabel(l16);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "exception", "Ljava/lang/Throwable;");
      Label l17 = new Label();
      mv.visitJumpInsn(IFNULL, l17);
      mv.visitTypeInsn(NEW, "java/util/concurrent/ExecutionException");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "exception", "Ljava/lang/Throwable;");
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/ExecutionException", "<init>", "(Ljava/lang/Throwable;)V");
      mv.visitInsn(ATHROW);
      mv.visitLabel(l17);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "result", "Ljava/lang/Object;");
      mv.visitInsn(ARETURN);
      Label l18 = new Label();
      mv.visitLabel(l18);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
      return null;
    }

    private MethodVisitor rewriteInnerGetMethod(MethodVisitor mv) {
      mv.visitCode();
      Label l0 = new Label();
      Label l1 = new Label();
      Label l2 = new Label();
      mv.visitTryCatchBlock(l0, l1, l2, null);
      Label l3 = new Label();
      mv.visitTryCatchBlock(l2, l3, l2, null);
      Label l4 = new Label();
      mv.visitLabel(l4);
      mv.visitVarInsn(ALOAD, 0);
      mv
          .visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "this$0",
                          "Ljava/util/concurrent/FutureTask;");
      mv.visitMethodInsn(INVOKESTATIC, "com/tc/object/bytecode/ManagerUtil", "isManaged", "(Ljava/lang/Object;)Z");
      Label l5 = new Label();
      mv.visitJumpInsn(IFEQ, l5);
      Label l6 = new Label();
      mv.visitLabel(l6);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", MANAGED_OBJECT_LOCK_FIELD_NAME,
                        "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 1);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l0);
      Label l7 = new Label();
      mv.visitJumpInsn(GOTO, l7);
      Label l8 = new Label();
      mv.visitLabel(l8);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", MANAGED_OBJECT_LOCK_FIELD_NAME,
                        "Ljava/lang/Object;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "wait", "()V");
      mv.visitLabel(l7);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ICONST_0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "tryAcquireShared", "(I)I");
      mv.visitJumpInsn(IFLT, l8);
      Label l9 = new Label();
      mv.visitLabel(l9);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l1);
      Label l10 = new Label();
      mv.visitJumpInsn(GOTO, l10);
      mv.visitLabel(l2);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l3);
      mv.visitInsn(ATHROW);
      mv.visitJumpInsn(GOTO, l10);
      mv.visitLabel(l5);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ICONST_0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "acquireSharedInterruptibly", "(I)V");
      mv.visitLabel(l10);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitInsn(ICONST_4);
      Label l11 = new Label();
      mv.visitJumpInsn(IF_ICMPNE, l11);
      mv.visitTypeInsn(NEW, "java/util/concurrent/CancellationException");
      mv.visitInsn(DUP);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/CancellationException", "<init>", "()V");
      mv.visitInsn(ATHROW);
      mv.visitLabel(l11);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "exception", "Ljava/lang/Throwable;");
      Label l12 = new Label();
      mv.visitJumpInsn(IFNULL, l12);
      mv.visitTypeInsn(NEW, "java/util/concurrent/ExecutionException");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "exception", "Ljava/lang/Throwable;");
      mv
          .visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/ExecutionException", "<init>",
                           "(Ljava/lang/Throwable;)V");
      mv.visitInsn(ATHROW);
      mv.visitLabel(l12);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "result", "Ljava/lang/Object;");
      mv.visitInsn(ARETURN);
      Label l13 = new Label();
      mv.visitLabel(l13);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
      return null;
    }

    private MethodVisitor rewriteInnerCancelMethod(MethodVisitor mv) {
      mv.visitCode();
      Label l0 = new Label();
      Label l1 = new Label();
      Label l2 = new Label();
      mv.visitTryCatchBlock(l0, l1, l2, null);
      Label l3 = new Label();
      mv.visitTryCatchBlock(l2, l3, l2, null);
      Label l4 = new Label();
      Label l5 = new Label();
      Label l6 = new Label();
      mv.visitTryCatchBlock(l4, l5, l6, null);
      Label l7 = new Label();
      mv.visitTryCatchBlock(l6, l7, l6, null);
      Label l8 = new Label();
      mv.visitLabel(l8);
      mv.visitInsn(ICONST_M1);
      mv.visitVarInsn(ISTORE, 2);
      Label l9 = new Label();
      mv.visitLabel(l9);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 3);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "getState", "()I");
      mv.visitVarInsn(ISTORE, 2);
      Label l10 = new Label();
      mv.visitLabel(l10);
      mv.visitVarInsn(ALOAD, 3);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l1);
      Label l11 = new Label();
      mv.visitJumpInsn(GOTO, l11);
      mv.visitLabel(l2);
      mv.visitVarInsn(ALOAD, 3);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l3);
      mv.visitInsn(ATHROW);
      mv.visitLabel(l11);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ILOAD, 2);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "ranOrCancelled", "(I)Z");
      Label l12 = new Label();
      mv.visitJumpInsn(IFEQ, l12);
      mv.visitInsn(ICONST_0);
      mv.visitInsn(IRETURN);
      mv.visitLabel(l12);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitVarInsn(ILOAD, 2);
      mv.visitInsn(ICONST_4);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "compareAndSetState", "(II)Z");
      mv.visitJumpInsn(IFEQ, l8);
      Label l13 = new Label();
      mv.visitJumpInsn(GOTO, l13);
      Label l14 = new Label();
      mv.visitLabel(l14);
      mv.visitJumpInsn(GOTO, l8);
      mv.visitLabel(l13);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "managedLock", "Ljava/lang/Object;");
      mv.visitInsn(DUP);
      mv.visitVarInsn(ASTORE, 2);
      mv.visitInsn(MONITORENTER);
      mv.visitLabel(l4);
      mv.visitVarInsn(ILOAD, 1);
      Label l15 = new Label();
      mv.visitJumpInsn(IFEQ, l15);
      Label l16 = new Label();
      mv.visitLabel(l16);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/FutureTask$Sync", "managedInnerCancel", "()V");
      mv.visitLabel(l15);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ICONST_0);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask$Sync", "releaseShared", "(I)Z");
      mv.visitInsn(POP);
      Label l17 = new Label();
      mv.visitLabel(l17);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l5);
      Label l18 = new Label();
      mv.visitJumpInsn(GOTO, l18);
      mv.visitLabel(l6);
      mv.visitVarInsn(ALOAD, 2);
      mv.visitInsn(MONITOREXIT);
      mv.visitLabel(l7);
      mv.visitInsn(ATHROW);
      mv.visitLabel(l18);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "this$0", "Ljava/util/concurrent/FutureTask;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/FutureTask", "done", "()V");
      Label l19 = new Label();
      mv.visitLabel(l19);
      mv.visitInsn(ICONST_1);
      mv.visitInsn(IRETURN);
      Label l20 = new Label();
      mv.visitLabel(l20);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
      return null;
    }

    private void addManagedTryReleaseSharedMethod() {
      MethodVisitor mv = cv.visitMethod(ACC_PRIVATE, MANAGED_TRY_RELEASE_SHARED_METHOD, "()Z", null, null);
      mv.visitCode();
      Label l0 = new Label();
      mv.visitLabel(l0);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ACONST_NULL);
      mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", "runner", "Ljava/lang/Thread;");
      Label l1 = new Label();
      mv.visitLabel(l1);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitInsn(ACONST_NULL);
      mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", PROXY_RUNNER_FIELD_NAME, "Ljava/lang/Object;");
      Label l2 = new Label();
      mv.visitLabel(l2);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", MANAGED_OBJECT_LOCK_FIELD_NAME, "Ljava/lang/Object;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "notifyAll", "()V");
      Label l3 = new Label();
      mv.visitLabel(l3);
      mv.visitInsn(ICONST_1);
      mv.visitInsn(IRETURN);
      Label l4 = new Label();
      mv.visitLabel(l4);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    private void addManagedInnerCancelMethod() {
      MethodVisitor mv = cv.visitMethod(ACC_PRIVATE + ACC_SYNTHETIC, MAANGED_INNER_CANCEL_METHOD_NAME, "()V", null, null);
      mv.visitCode();
      Label l0 = new Label();
      mv.visitLabel(l0);
      /*mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
      mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
      mv.visitInsn(DUP);
      mv.visitLdcInsn("Running managedInnerCancel: ");
      mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "(Ljava/lang/String;)V");
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "runner", "Ljava/lang/Thread;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");

      Label l1 = new Label();
      mv.visitLabel(l1);
      mv.visitTypeInsn(NEW, "java/lang/Exception");
      mv.visitInsn(DUP);
      mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Exception", "<init>", "()V");
      mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "(Ljava/io/PrintStream;)V");
      */
      Label l2 = new Label();
      mv.visitLabel(l2);
      mv.visitVarInsn(ALOAD, 0);
      mv.visitFieldInsn(GETFIELD, "java/util/concurrent/FutureTask$Sync", "runner", "Ljava/lang/Thread;");
      mv.visitVarInsn(ASTORE, 1);
      Label l3 = new Label();
      mv.visitLabel(l3);
      mv.visitVarInsn(ALOAD, 1);
      Label l4 = new Label();
      mv.visitJumpInsn(IFNULL, l4);
      Label l5 = new Label();
      mv.visitLabel(l5);
      mv.visitVarInsn(ALOAD, 1);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "interrupt", "()V");
      mv.visitLabel(l4);
      mv.visitInsn(RETURN);
      Label l6 = new Label();
      mv.visitLabel(l6);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    private static class Constructor extends MethodAdapter implements Opcodes {
      public Constructor(MethodVisitor mv) {
        super(mv);
      }

      public void visitFieldInsn(int opcode, String owner, String name, String desc) {
        super.visitFieldInsn(opcode, owner, name, desc);
        if (PUTFIELD == opcode && "java/util/concurrent/FutureTask$Sync".equals(owner) && "callable".equals(name)
            && "Ljava/util/concurrent/Callable;".equals(desc)) {
          mv.visitVarInsn(ALOAD, 0);
          mv.visitTypeInsn(NEW, "java/lang/Object");
          mv.visitInsn(DUP);
          mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
          mv.visitFieldInsn(PUTFIELD, "java/util/concurrent/FutureTask$Sync", MANAGED_OBJECT_LOCK_FIELD_NAME,
                            "Ljava/lang/Object;");

        }
      }
    }
  }
}