<?xml version="1.0" encoding="UTF-8"?>
<!-- Apache Maven 2 POM generated by Apache Ivy http://ant.apache.org/ivy/ 
  Apache Ivy version: 2.2.0 20100923230623 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.terracotta</groupId>
    <artifactId>terracotta-parent</artifactId>
    <version>3.7.10</version>
    <relativePath>../terracotta-parent</relativePath>
  </parent>

  <groupId>org.terracotta.internal</groupId>
  <artifactId>terracotta-kit</artifactId>
  <packaging>pom</packaging>
  <name>terracotta-kit</name>
  
  <properties>
    <toolkit.api>1.6</toolkit.api>
    <toolkit.version>5.10.0</toolkit.version>    
    <ehcache.version>2.6.11</ehcache.version>
    <quartz.version>2.1.7</quartz.version>
    <terracotta-session.version>1.3.10</terracotta-session.version>
    <quartz-terracotta.version>2.3.10</quartz-terracotta.version>
    
    <skip.deploy>true</skip.deploy>
    <skip.testjar>true</skip.testjar>
    <kit.edition>opensource</kit.edition>
    <ee.suffix/>
    <packaging>dir</packaging>
    <kit.name>${terracotta.artifactId}-${project.version}</kit.name>
    <rootDir>${project.build.directory}/${kit.name}</rootDir>
    <skip.schema>true</skip.schema>
    <no.extra>false</no.extra>
    <gt.kit>false</gt.kit>    
    
    <terracotta.artifactId>terracotta${ee.suffix}</terracotta.artifactId>
    <terracotta.jarname>${terracotta.artifactId}-${project.version}.jar</terracotta.jarname>
    <toolkit.artifactId>terracotta-toolkit-${toolkit.api}-runtime${ee.suffix}</toolkit.artifactId>
    <quartz-terracotta.artifactId>quartz-terracotta${ee.suffix}</quartz-terracotta.artifactId>    
    <ehcache-core.artifactId>ehcache-core</ehcache-core.artifactId>
    <ehcache-terracotta.artifactId>ehcache-terracotta${ee.suffix}</ehcache-terracotta.artifactId>
    
    <terracotta.license>LICENSE.txt</terracotta.license>
    <site-xml.url>http://svn.terracotta.org/svn/tc/eclipse-update-site/site.xml</site-xml.url>
    <ehcache-core.readme.url>http://svn.terracotta.org/svn/forge/projects/terracotta-ehcache/branches/tc-3.7/ehcache-express-kit/src/assemble/README.html</ehcache-core.readme.url>
    <ehcache-core.quickstart.url>http://svn.terracotta.org/svn/forge/projects/terracotta-ehcache/branches/tc-3.7/ehcache-express-kit/src/assemble/QUICK-START.html</ehcache-core.quickstart.url>    
    <ehcache-core.tclicense.url>http://svn.terracotta.org/svn/forge/projects/terracotta-ehcache/branches/tc-3.7/ehcache-express-kit/src/assemble/EHCACHE-TERRACOTTA-LICENSE.txt</ehcache-core.tclicense.url>
    <ehcache-core.tcschema.url>http://svn.terracotta.org/svn/ehcache/branches/ehcache-core-2.6.x/src/main/config/ehcache-terracotta.xml</ehcache-core.tcschema.url>
    <quartz-kit.url>http://download.terracotta.org/quartz/quartz-${quartz.version}.tar.gz</quartz-kit.url>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.terracotta</groupId>
      <artifactId>${terracotta.artifactId}</artifactId>
      <version>${project.version}</version>
    </dependency>
    
    <!-- for packaging purpose -->
    <dependency>
      <groupId>org.terracotta.internal</groupId>
      <artifactId>build-data</artifactId>
      <version>${project.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>gf-3122</groupId>
      <artifactId>gf.javax.servlet-api</artifactId>
      <version>3.0.1</version>
    </dependency>

    <dependency>
      <groupId>org.terracotta</groupId>
      <artifactId>${toolkit.artifactId}</artifactId>
      <version>${toolkit.version}</version>
      <scope>provided</scope>
    </dependency>       
    
    <dependency>
      <groupId>org.terracotta</groupId>
      <artifactId>tcconfig</artifactId>
      <classifier>docflex</classifier>
      <version>${tc-config.version}</version>
      <type>zip</type>
      <scope>provided</scope>
    </dependency>
    
    <!-- ehcache -->
    <dependency>
      <groupId>net.sf.ehcache</groupId>
      <artifactId>${ehcache-core.artifactId}</artifactId>
      <version>${ehcache.version}</version>
      <classifier>distribution</classifier>
      <type>tar.gz</type>
      <scope>provided</scope>
	  <exclusions>
        <exclusion>
		  <groupId>com.sun</groupId>
		  <artifactId>tools</artifactId>
	    </exclusion>
	  </exclusions>
    </dependency>     
    <dependency>
      <groupId>net.sf.ehcache</groupId>
      <artifactId>${ehcache-terracotta.artifactId}</artifactId>
      <version>${ehcache.version}</version>
      <scope>provided</scope>
    </dependency>    
    <dependency>
      <groupId>org.terracotta.samples.ehcache</groupId>
      <artifactId>colorcache</artifactId>
      <version>${project.version}</version>
      <classifier>distribution</classifier>
      <type>tar.gz</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.terracotta.samples.ehcache.hibernate</groupId>
      <artifactId>events</artifactId>
      <version>${project.version}</version>
      <classifier>distribution</classifier>
      <type>tar.gz</type>
      <scope>provided</scope>
    </dependency>

    <!-- quartz -->
    <dependency>
      <groupId>org.terracotta.quartz</groupId>
      <artifactId>${quartz-terracotta.artifactId}</artifactId>
      <version>${quartz-terracotta.version}</version>
      <scope>provided</scope>
    </dependency>
    
    <!-- express session -->
    <dependency>
      <groupId>org.terracotta.session</groupId>
      <artifactId>terracotta-session</artifactId>
      <version>${terracotta-session.version}</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>
      
  <build>
    <plugins>   
    </plugins>
  </build>
      
  <profiles>
    <!-- ********************************************************************************** -->
    <!--   profile to build Enterprise Terracotta kit. Need to be used with 'kit' profile   -->    
    <!-- ********************************************************************************** -->  
    <profile>
	    <id>enterprise</id>
      <properties>
        <kit.edition>enterprise</kit.edition>
        <ee.suffix>-ee</ee.suffix>
        <ehcache-core.artifactId>ehcache-core-ee-kit</ehcache-core.artifactId>
        <terracotta.license>TERRACOTTA-TRIAL-LICENSE.txt</terracotta.license>
      </properties>
	  </profile>
    
    <!-- ********************************************************************************** -->
    <!--   profile to build Enterprise Terracotta -gt kit. Need to be used with 'kit' profile   -->    
    <!-- ********************************************************************************** -->  
    <profile>
	    <id>gt</id>
      <properties>
        <gt.kit>true</gt.kit>
        <kit.name>${terracotta.artifactId}-gt-${project.version}</kit.name>
      </properties>
	  </profile>    
  
    <!-- ******************************************************************* -->
    <!--   profile to exclude extra packaging of ehcache, quartz, sessions   -->    
    <!-- ******************************************************************* -->     
    <profile>
	    <id>no-extra</id>
      <properties>
        <no.extra>true</no.extra>
      </properties>
	  </profile>    
    
    <!-- ********************************************** -->
    <!--   profile to build opensource Terracotta kit   -->    
    <!-- ********************************************** -->    
    <profile>
      <id>kit</id>
      <build>
        <plugins>      
          <!-- clean up -->
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <version>${gmaven-plugin.version}</version>
            <executions>
              <execution>
                <id>clean-up</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <source>
                    ant.delete(dir: project.properties['rootDir'])
                  </source>
                </configuration>
              </execution>
            </executions>
          </plugin>                
          
          <!-- put tc.jar dependencies in /lib -->
          <!-- we use this plugin for this task because it can rewrite timestamp files to -SNAPSHOT -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>2.3</version>
            <executions>
              <execution>
                <id>tc-jar-depedencies-to-lib</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
                <configuration>
                  <finalName>${kit.name}/lib</finalName>
                  <descriptors>
                    <descriptor>${basedir}/src/assemble/lib.xml</descriptor>
                  </descriptors>
                  <appendAssemblyId>false</appendAssemblyId>
                  <attach>false</attach>
                </configuration>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>com.github.goldin</groupId>
            <artifactId>copy-maven-plugin</artifactId>
            <version>${copy-maven-plugin.version}</version>
            <executions>
              <!-- assemble kit content -->
              <execution>
                <id>preparing-terracotta-kit</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <groovyConfig>
                    <classpath>${project.basedir}/src/scripts</classpath>
                  </groovyConfig>        
                  <verbose>false</verbose>
                  <resources>
                    <!-- prepare skeleton structure of the kit -->            
                    <resource>
                      <targetPath>${rootDir}</targetPath>
                      <directory>${basedir}/src/packaging/opensource</directory>
                      <preservePath>true</preservePath>
                    </resource>
                    <resource>
                      <runIf>{{ "${kit.edition}" == "enterprise" }}</runIf>
                      <targetPath>${rootDir}</targetPath>
                      <directory>${basedir}/src/packaging/enterprise</directory>
                      <preservePath>true</preservePath>
                    </resource>
                    <resource>
                      <runIf>{{ "${kit.edition}" == "enterprise" }}</runIf>
                      <directory>${rootDir}</directory>
                      <includes>
                        <include>LICENSE.txt</include>
                      </includes>
                      <clean>true</clean>
                    </resource>                    

                    <!-- schema -->
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}/config-samples/schema</targetPath>
                      <dependency>
                        <groupId>org.terracotta</groupId>
                        <artifactId>tcconfig</artifactId>
                        <classifier>docflex</classifier>
                        <type>zip</type>
                      </dependency>
                      <unpack>true</unpack>
                      <preservePath>true</preservePath>
                      <dependenciesAtM2>true</dependenciesAtM2>
                    </resource>            
                    
                    <!-- build data -->
                    <resource>
                      <targetPath>${rootDir}/lib/resources</targetPath>
                      <dependency>
                        <groupId>org.terracotta.internal</groupId>
                        <artifactId>build-data</artifactId>
                      </dependency>
                      <zipEntries>
                        <zipEntry>build-data.txt</zipEntry>
                        <zipEntry>tim-get.properties</zipEntry>
                      </zipEntries>
                      <unpack>true</unpack>              
                    </resource>
                    
                    <!-- tookit -->
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}/common</targetPath>
                      <dependency>
                        <groupId>org.terracotta</groupId>
                        <artifactId>${toolkit.artifactId}</artifactId>
                      </dependency>
                      <dependenciesAtM2>true</dependenciesAtM2>
                    </resource>
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}/common/docs/javadoc</targetPath>
                      <dependency>
                        <groupId>org.terracotta</groupId>
                        <artifactId>${toolkit.artifactId}</artifactId>
                        <classifier>javadoc</classifier>
                      </dependency>
                      <unpack>true</unpack>
                      <dependenciesAtM2>true</dependenciesAtM2>
                    </resource>            
                    
                    <!-- ehcache-core -->
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}</targetPath>
                      <dependency>
                        <groupId>net.sf.ehcache</groupId>
                        <artifactId>${ehcache-core.artifactId}</artifactId>
                        <classifier>distribution</classifier>
                        <type>tar.gz</type>
                      </dependency>
                      <dependenciesAtM2>true</dependenciesAtM2>
                      <unpack>true</unpack>
                      <process>Util.processEhcacheDistribution(project)</process>              
                    </resource>
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <directory>${rootDir}/ehcache</directory>
                      <include>**/SLF4J-LICENSE.txt,**/TERRACOTTA-TRIAL-LICENSE.txt,**/SUBSCRIPTION-AGREEMENT.pdf</include>
                      <clean>true</clean>
                    </resource>
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}/ehcache</targetPath>
                      <file>${ehcache-core.readme.url}</file>
                    </resource>
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}/ehcache</targetPath>
                      <file>${ehcache-core.quickstart.url}</file>
                    </resource>
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}/ehcache</targetPath>
                      <file>${ehcache-core.tcschema.url}</file>
                      <destFileName>ehcache.xml</destFileName>
                    </resource>
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}/ehcache/licenses</targetPath>
                      <file>${ehcache-core.tclicense.url}</file>
                    </resource>
                    
                    <!-- move tmc to the root, https://jira.terracotta.org/jira/browse/DEV-7354 -->
                    <resource>
                      <targetPath>${rootDir}/tmc</targetPath>
                      <directory>${rootDir}/ehcache/tmc</directory>
                      <preservePath>true</preservePath>
                      <failIfNotFound>false</failIfNotFound>
                      <!-- move does not really work; it will move the files at the root, but not the dirs... -->
                      <!-- move>true</move-->
                    </resource>
                    <resource>
                      <directory>${rootDir}/ehcache/tmc/</directory>
                      <clean>true</clean>
                      <cleanEmptyDirectories>true</cleanEmptyDirectories>
                      <failIfNotFound>false</failIfNotFound>
                    </resource>
                    <resource>
                      <targetPath>${rootDir}/bin</targetPath>
                      <directory>${rootDir}/tmc/bin</directory>
                      <includes>
                       <include>add-tc-agent.*</include>
                       <include>keychain.*</include>
                       <include>usermanagement.*</include>
                       <include>management-cli-common.*</include>
                      </includes>
                      <failIfNotFound>false</failIfNotFound>
                    </resource>
                    <resource>
                      <targetPath>${rootDir}/lib/management-cli</targetPath>
                      <directory>${rootDir}/tmc/lib</directory>
                      <failIfNotFound>false</failIfNotFound>
                    </resource>
                    <resource>
                      <file>${rootDir}/lib/management-cli/jetty-runner.jar</file>
                      <clean>true</clean>                      
                      <failIfNotFound>false</failIfNotFound>
                    </resource>
                    <resource>
                      <file>${rootDir}/lib/management-cli/start.jar</file>
                      <clean>true</clean>                      
                      <failIfNotFound>false</failIfNotFound>
                    </resource>
                    <resource>
                      <directory>${rootDir}/tmc/</directory>
                      <clean>true</clean>
                      <cleanEmptyDirectories>true</cleanEmptyDirectories>
                      <failIfNotFound>false</failIfNotFound>
                    </resource>
                    
                    <!-- ehcache terracotta -->
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}/ehcache/lib</targetPath>
                      <dependencies>
                        <dependency>
                          <groupId>net.sf.ehcache</groupId>
                          <artifactId>${ehcache-terracotta.artifactId}</artifactId>
                        </dependency>
                      </dependencies>
                      <dependenciesAtM2>true</dependenciesAtM2>
                    </resource>
                    
                    <!-- ehcache samples-->
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}/ehcache/samples</targetPath>
                      <dependencies>
                        <dependency>
                          <groupId>org.terracotta.samples.ehcache</groupId>
                          <artifactId>colorcache</artifactId>
                          <classifier>distribution</classifier>
                          <type>tar.gz</type>
                        </dependency>
                        <dependency>
                          <groupId>org.terracotta.samples.ehcache.hibernate</groupId>
                          <artifactId>events</artifactId>
                          <classifier>distribution</classifier>
                          <type>tar.gz</type>
                        </dependency>
                      </dependencies>
                      <unpack>true</unpack>
                      <dependenciesAtM2>true</dependenciesAtM2>
                    </resource>             
                    
                    <!-- session express -->
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}/sessions</targetPath>
                      <dependency>
                        <groupId>org.terracotta.session</groupId>
                        <artifactId>terracotta-session</artifactId>
                      </dependency>
                      <dependenciesAtM2>true</dependenciesAtM2>
                    </resource>
                    
                    <!-- quartz -->
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}</targetPath>
                      <file>${quartz-kit.url}</file>
                      <unpack>true</unpack>
                      <process>Util.processQuartzDistribution(project)</process>
                    </resource>
                    <resource>
                      <runIf>{{ "${no.extra}" != "true" }}</runIf>
                      <targetPath>${rootDir}/quartz</targetPath>
                      <dependency>
                        <groupId>org.terracotta.quartz</groupId>
                        <artifactId>${quartz-terracotta.artifactId}</artifactId>
                      </dependency>
                      <dependenciesAtM2>true</dependenciesAtM2>
                    </resource>
                    
                    <!-- 1. remove build-data.txt from terracotta jar and rename it to tc.jar 
                         2. set execution permissions for scripts and library files
                         3. apply -gt kit changes
                    -->
                    <resource>
                      <targetPath>${rootDir}/lib</targetPath>
                      <dependency>
                        <groupId>org.terracotta</groupId>
                        <artifactId>${terracotta.artifactId}</artifactId>
                      </dependency>
                      <dependenciesAtM2>true</dependenciesAtM2>
                      <process>Util.processTerracottaJar(project, files.first(), "lib")
                               Util.setPermission(project)
                               if (project.properties['gt.kit'] == "true") {
                                 Util.processEnterpriseGtKit(project)
                               }
                      </process>
                    </resource>                    
                  </resources>
                </configuration>                
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    
    <!-- *********************************************** -->
    <!--   profile to make Izpack installer of the kit   -->    
    <!-- *********************************************** -->     
    <profile>
      <id>installer</id>
      <properties>
        <izpack.src.directory>${project.basedir}/src/packaging/izpack</izpack.src.directory>
        <izpack.output.directory>${project.build.directory}/izpack</izpack.output.directory>
        <izpack.install.xml>${izpack.output.directory}/install.xml</izpack.install.xml>
        <izpack.installer.output>${project.build.directory}/${kit.name}-installer.jar</izpack.installer.output>
        <izpack.basedir>${rootDir}</izpack.basedir>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.goldin</groupId>
            <artifactId>copy-maven-plugin</artifactId>
            <version>${copy-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>prepare-izpack-installer</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <groovyConfig>
                    <classpath>${project.basedir}/src/scripts</classpath>
                  </groovyConfig>        
                  <verbose>false</verbose>  
                  <resources>
                    <!-- Copy and filter the IzPack shortcut files. -->
                    <resource>
                      <targetPath>${izpack.output.directory}</targetPath>
                      <directory>${izpack.src.directory}</directory>
                      <include>*.xml</include>
                      <filtering>true</filtering>
                      <encoding>UTF-8</encoding>
                    </resource>
                    <resource>
                      <targetPath>${izpack.output.directory}</targetPath>
                      <directory>${izpack.src.directory}/resources</directory>
                      <include>*.*</include>
                      <filtering>false</filtering>
                    </resource>
                      <resource>
                        <targetPath>${izpack.output.directory}</targetPath>
                        <directory>${izpack.src.directory}/resources/${kit.edition}</directory>
                        <include>*.*</include>
                        <filtering>false</filtering>
                      </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <version>${gmaven-plugin.version}</version>
            <executions>
              <execution>
                <id>generate-install-xml</id>
                <phase>package</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <source>${izpack.src.directory}/InstallXmlBuilder.groovy</source>
                </configuration>
              </execution>
              <execution>
                <id>create-izpack-installer</id>
                <phase>package</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <source>${project.basedir}/src/scripts/IzpackPackage.groovy</source>
                </configuration>
              </execution>
            </executions>
            <dependencies>
              <dependency>
                  <groupId>org.apache.ant</groupId>
                  <artifactId>ant</artifactId>
                  <version>1.8.2</version>
              </dependency>
              <dependency>
                <groupId>org.terracotta</groupId>
                <artifactId>izpack-standalone-compiler</artifactId>
                <version>4.3.0</version>
              </dependency>
            </dependencies>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- *********************************************** -->
    <!--   profile to make a patch tarball from the kit  -->    
    <!-- *********************************************** -->     
    <profile>
      <id>patch</id>
      <properties>
        <patch.def.file>src/packaging/patch/patch-def.xml</patch.def.file>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <version>${gmaven-plugin.version}</version>
            <executions>
              <execution>
                <id>create-patch-tarball</id>
                <phase>package</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <scriptpath>
                    <element>${basedir}/src/scripts</element>
                  </scriptpath>                
                  <source>
                    import Util

                    File kitDir = new File("${rootDir}")
                    File patchDefFile = new File("${patch.def.file}")
                    def patchDef = new XmlSlurper().parse(patchDefFile)
                    def patchLevel = patchDef.level.text()
                    def patchName = "${kit.name}-patch${patchLevel}"
                    def patchFiles = patchDef.files.file.list().collect { it.text() }

                    String patchDataFile = Util.createPatchDataFile(project, patchLevel)
                    patchFiles.leftShift(patchDataFile)

                    ant.tar(destfile: "${project.build.directory}/${patchName}.tar.gz", longfile: "gnu", compression: "gzip") {
                      patchFiles.each { file -&gt;
                        tarfileset(dir: "${kitDir}") {
                          include(name: file)
                        }
                      }
                    }
                  </source>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- *********************************** -->
    <!-- profile to build eclipse plugin kit -->    
    <!-- *********************************** -->
    <profile>
      <id>eclipse-plugin</id>
      <properties>
        <kit.name>${terracotta.artifactId}-eclipse-plugin-${project.version}</kit.name>      
        <rootDir>${project.build.directory}/${kit.name}</rootDir>
        <eclipse.plugin.version/>        
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.terracotta.internal</groupId>
          <artifactId>ui-eclipse</artifactId>
          <version>${project.version}</version>
        </dependency>
      </dependencies>
      <build>
        <plugins>      
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <version>${gmaven-plugin.version}</version>
            <executions>
              <execution>
                <id>set-properties</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <scriptpath>
                    <element>${basedir}/src/scripts</element>
                  </scriptpath>                
                  <source>
                    import Util
                    def revision = project.properties['build.revision']
                    def timestamp = new java.text.SimpleDateFormat("yyMMdd").format(new Date())
                    Util.setEclipsePluginVersion(project, revision, timestamp)
                  </source>
                </configuration>
              </execution>
            </executions>
          </plugin>            
          <plugin>
            <groupId>com.github.goldin</groupId>
            <artifactId>copy-maven-plugin</artifactId>
            <version>${copy-maven-plugin.version}</version>
            <configuration>
              <groovyConfig>
                <classpath>${project.basedir}/src/scripts</classpath>
              </groovyConfig>        
              <verbose>false</verbose>
              <resources>
                <!-- prepare skeleton structure of the kit -->
                <resource>
                  <runIf>{{ new File( project.build.directory, "${kit.name}" ).isDirectory() }}</runIf>
                  <directory>${rootDir}</directory>
                  <includes>
                    <include>**/**</include>
                  </includes>
                  <clean>true</clean>
                  <cleanEmptyDirectories>true</cleanEmptyDirectories>
                </resource>

                <!-- non-filtered resource -->
                <resource>
                  <targetPath>${rootDir}</targetPath>
                  <directory>${basedir}/src/packaging/eclipse</directory>
                  <preservePath>true</preservePath>
                </resource>
                
                <!-- modules folder -->
                <resource>
                  <targetPath>${rootDir}/update/plugins/platform/modules</targetPath>
                  <directory>${basedir}/src/packaging/opensource/platform/modules</directory>
                  <preservePath>true</preservePath>
                </resource>
                
                <!-- download site.xml -->
                <resource>
                  <targetPath>${rootDir}/update</targetPath>
                  <file>${site-xml.url}</file>
                  <replaces>
                    <replace>
                      <from>VERSION</from>
                      <to>{{project.properties['eclipse.plugin.version']}}</to>
                      <groovy>true</groovy>
                    </replace>
                  </replaces>
                </resource>
                    
                <!-- filtered resource -->
                <resource>
                  <targetPath>${rootDir}</targetPath>
                  <directory>${basedir}/src/packaging/eclipse</directory>
                  <includes>
                    <include>**/feature.xml</include>
                    <include>**/MANIFEST.MF</include>
                  </includes>
                  <preservePath>true</preservePath>
                  <filtering>true</filtering>
                </resource>                 
          
                <!-- populate lib folder -->
                <resource>
                  <targetPath>${rootDir}/update/plugins/lib</targetPath>
                  <dependency>
                    <excludeScope>provided</excludeScope>
                    <excludeArtifactIds>${terracotta.artifactId},build-data,thirdparty-api,dso-cluster-api,stax-api,native-tool,ant,mockito-all,ant-launcher,junit,linked-child-process
                    </excludeArtifactIds>
                  </dependency>
                  <dependenciesAtM2>true</dependenciesAtM2>
                </resource>
            
                <!-- build data -->
                <resource>
                  <targetPath>${rootDir}/update/plugins/lib/resources</targetPath>
                  <dependency>
                    <groupId>org.terracotta.internal</groupId>
                    <artifactId>build-data</artifactId>
                  </dependency>
                  <zipEntries>
                    <zipEntry>build-data.txt</zipEntry>
                    <zipEntry>tim-get.properties</zipEntry>
                  </zipEntries>
                  <unpack>true</unpack>              
                </resource>
                
                <!-- 1. remove build-data.txt from terracotta jar and rename it to tc.jar 
                     2. set execution permissions for scripts and library files
                -->
                <resource>
                  <targetPath>${rootDir}/update/plugins/lib</targetPath>
                  <dependency>
                    <groupId>org.terracotta</groupId>
                    <artifactId>${terracotta.artifactId}</artifactId>
                  </dependency>
                  <process>Util.processTerracottaJar(project, files.first(), "update/plugins/lib")
                           Util.setPermission(project)
                  </process>
                </resource>                    
                
                <!-- create feature jar -->
                <resource>
                  <targetPath>${rootDir}/update/features</targetPath>
                  <file>${basedir}/src/packaging/eclipse/update/features/feature.xml</file>
                  <filtering>true</filtering>
                  <process>Util.createFeatureJar(project)</process>
                </resource>
                
                <!-- create plugin jar -->
                <resource>
                  <targetPath>${rootDir}/update/plugins/META-INF</targetPath>
                  <file>${basedir}/src/packaging/eclipse/update/plugins/META-INF/MANIFEST.MF</file>
                  <filtering>true</filtering>
                  <process>Util.createPluginJar(project)</process>
                </resource>
              </resources>
            </configuration>
            <executions>
              <execution>
                <id>packaging-eclipse-plugin</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
              </execution>
            </executions>                
          </plugin>            
        </plugins>
      </build>
    </profile>

    <!-- *************************************** -->
    <!--   profile to make tar ball of the kit   -->    
    <!-- *************************************** -->     
    <profile>
	    <id>tarball</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <version>${gmaven-plugin.version}</version>
            <executions>
              <execution>
                <id>create-tarball</id>
                <phase>package</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>         
                  <source>
                    def srcdir = new File(project.basedir, "target/${kit.name}") 
                    ant.tar(destfile: "${srcdir}.tar.gz", longfile: "gnu", compression: "gzip") {
                      tarfileset(dir: "${srcdir}", prefix: "${kit.name}", excludes: "**/.placeholder,**/bin/**,**/lib/**,**/*.sh,**/*.bat")
                      tarfileset(dir: "${srcdir}", prefix: "${kit.name}", includes: "**/bin/**,**/lib/**,**/*.sh,**/*.bat", filemode: "755")
                    } 
                  </source>
                </configuration>
              </execution>
            </executions>
          </plugin>            
        </plugins>
      </build>
	  </profile>    
  </profiles>
  
</project>
