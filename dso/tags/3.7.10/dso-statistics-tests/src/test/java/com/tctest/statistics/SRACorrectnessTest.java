/*
 * All content copyright (c) 2003-2008 Terracotta, Inc., except as may otherwise be noted in a separate copyright
 * notice. All rights reserved.
 */
package com.tctest.statistics;

import com.tc.statistics.StatisticData;
import com.tc.statistics.StatisticRetrievalAction;
import com.tc.statistics.StatisticType;
import com.tc.test.TCTestCase;
import com.tc.util.Assert;
import com.tc.util.TCAssertionError;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

public class SRACorrectnessTest extends TCTestCase {

  public void testCorrectnessLogic() throws Exception {
    try {
      checkCorrectSRA(new BadSRAMissingName());
      fail();
    } catch (NullPointerException e) {
      assertEquals("name is null", e.getMessage());
    }

    try {
      checkCorrectSRA(new BadSRAMissingType());
      fail();
    } catch (NullPointerException e) {
      assertEquals("type is null", e.getMessage());
    }

    try {
      checkCorrectSRA(new BadSRANonFinalField());
      fail();
    } catch (TCAssertionError e) {
      // expected
    }

    checkCorrectSRA(new CorrectSRA());
  }

  public void checkCorrectSRA(final StatisticRetrievalAction sra) {
    System.out.println("Checking " + sra);
    Assert.assertNotNull("name", sra.getName());
    Assert.assertNotNull("type", sra.getType());
    Class sraClass = sra.getClass();
    Field[] fields = sraClass.getDeclaredFields();
    for (Field field : fields) {
      if (!Modifier.isFinal(field.getModifiers())) {
        if (Modifier.isStatic(field.getModifiers()) && field.getName().startsWith("class$")
            && field.getType() == Class.class) {
          // these are synthetic static fields which are non final and
          // generated by javac when a static field refers to its class
          // in its initializer
        } else {
          Assert.fail("The '" + field.getName() + "' of SRA class '" + sraClass.getName() + "' is not final.");
        }
      }
    }
  }

  static class BadSRAMissingName implements StatisticRetrievalAction {
    public StatisticData[] retrieveStatisticData() {
      return StatisticRetrievalAction.EMPTY_STATISTIC_DATA;
    }

    public String getName() {
      return null;
    }

    public StatisticType getType() {
      return StatisticType.SNAPSHOT;
    }
  }

  static class BadSRAMissingType implements StatisticRetrievalAction {
    public StatisticData[] retrieveStatisticData() {
      return StatisticRetrievalAction.EMPTY_STATISTIC_DATA;
    }

    public String getName() {
      return "name";
    }

    public StatisticType getType() {
      return null;
    }
  }

  static class BadSRANonFinalField implements StatisticRetrievalAction {
    private String nonFinalField = "test";

    String getNonFinalField() {
      // This getter is here simply to remove the eclipse warning
      return nonFinalField;
    }

    public StatisticData[] retrieveStatisticData() {
      return StatisticRetrievalAction.EMPTY_STATISTIC_DATA;
    }

    public String getName() {
      return "name";
    }

    public StatisticType getType() {
      return StatisticType.STARTUP;
    }
  }

  static class CorrectSRA implements StatisticRetrievalAction {
    private final String finalField = "test";

    String getFinalField() {
      // This getter is here simply to remove the eclipse warning
      return finalField;
    }

    public StatisticData[] retrieveStatisticData() {
      return StatisticRetrievalAction.EMPTY_STATISTIC_DATA;
    }

    public String getName() {
      return "name";
    }

    public StatisticType getType() {
      return StatisticType.STARTUP;
    }
  }
}