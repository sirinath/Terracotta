PROBLEM_SHARING_DATA=Problem sharing data
PREVIOUS_ISSUE=Previous Issue
NEXT_ISSUE=Next Issue
APPLY=Apply
ISSUES=Issues
OBJECT_BROWSER=Object Browser
PRE_INSTRUMENTED_PREAMBLE=This is a portable, pre-instrumented type loaded from the boot classpath.
NEVER_PORTABLE_PREAMBLE=Instances of this type are never portable. Such objects as Threads, Sockets, or instances of any other type that is intimately associated with its host can never be shared by Terracotta.
NEVER_PORTABLE_FIELD_MSG=By declaring this field to be transient, Terracotta will not attempt to share it and it is your responsibility to see that it is re-initialized when its parent object is materialized on other clients. This can be accomplished by using an on-load script or method-invocation to reconstitute the object when it's containing object is loaded from the Terracotta server. Alternately, you can code the parent type to lazily initialize the child object, creating it whenever it's found to be null.
NEVER_PORTABLE_LOGICAL_CHILD_MSG=Since this object is contained by a logically-managed object, and therefore not a reference that can be managed by Terracotta, there is nothing that can be done in the configuration to disallow it's sharing. You will need to take action in the code to ensure that this object isn't added to a shared object graph.
NEVER_PORTABLE_ROOT_MSG=Since this object can never be shared, either remove the root declaration in your configuration or alter your code to assign a portable instance.
CONSIDER_TRANSIENT_ANCESTOR_MSG=Note that it may be more appropriate to prevent one of this objects ancestors from being shared.
NOT_PORTABLE_SYSTEM_TYPE_PREAMBLE=Instances of this system type are not portable. A portable type is either a pre-instrumented type loaded from the boot classpath or a type matching an instrumentation include rule in your configuration.
NOT_PORTABLE_SYSTEM_TYPE_FIELD_MSG=In order to share a system type, it must be loaded from the boot classpath. You can chose to add this type to the bootjar or you can exclude this field from being shared by declaring it as a transient field. If you declare this as a transient, it is your responsibility to see that it gets re-initialized when its containing object is materialized on other clients. This can be accomplished by using an on-load script or method-invocation to reconstitute the object when it's containing object is loaded from the Terracotta server. Alternately, you can code the parent type to lazily initialize the child object, creating it whenever it's found to be null.
NOT_PORTABLE_SYSTEM_TYPE_LOGICAL_CHILD_MSG=In order to share a system type, it must be loaded from the boot classpath. You can chose to add this type to the bootjar or you can ensure that objects of this type do not try to enter shared object graphs. Since this object is contained by a logically-managed object, and therefore not a reference that can be managed by Terracotta, there is nothing that can be done in the configuration to disallow its sharing. If you choose not to share this object, you will need to take action in the code to ensure that this object isn't added to a shared object graph.
NOT_PORTABLE_SYSTEM_TYPE_ROOT_MSG=In order to share a system type, it must be loaded from the boot classpath.
NOT_PORTABLE_PREAMBLE=Instances of this type are not portable. A portable type is either a pre-instrumented type loaded from the boot classpath or a type matching an instrumentation include rule in your configuration.
NOT_PORTABLE_FIELD_MSG=You can take action to make this type portable, you can exclude this field from being shared by declaring it as a transient field, or you can ensure that objects of this type do not enter shared object graphs. If you declare this as a transient, it is your responsibility to see that it gets re-initialized when its containing object is materialized on other clients. This can be accomplished by using an on-load script or method-invocation to reconstitute the object when it's containing object is loaded from the Terracotta server. Alternately, you can code the parent type to lazily initialize the child object, creating it whenever it's found to be null.
NOT_PORTABLE_LOGICAL_CHILD_MSG=You can take action to make this type portable or you can ensure that objects of this type do not enter shared object graphs. Since this object is contained by a logically-managed object, and therefore not a reference that can be managed by Terracotta, there is nothing that can be done in the configuration to disallow its sharing. If you choose not to share this object, you will need to take action in the code to ensure that this object isn't added to a shared object graph.
NOT_PORTABLE_ROOT_MSG=You can take action to make this type portable or you can alter your code to assign a different, portable instance to this root.
NON_PORTABLE_BASE_TYPE_MSG=One or more base types from which this type extends are not portable. These types must be included for instrumentation in order to share instances of this type.
REQUIRED_BOOT_JAR_TYPE_MSG=One or more system types from which this type extends are not portable because they have not been loaded from the bootjar.  These system types must be added to the bootjar in order to share instances of this type.
PORTABLE_PREAMBLE=Instances of this type are portable. A portable type is either a pre-instrumented type loaded from the boot classpath or a type matching an instrumentation include rule in your configuration.
PORTABLE_FIELD_MSG=You can chose to exclude this field from being shared by declaring it as a transient field. If you declare this as a transient, it is your responsibility to see that it gets re-initialized when its containing object is materialized on other clients. This can be accomplished by using an on-load script or method-invocation to reconstitute the object when it's containing object is loaded from the Terracotta server. Alternately, you can code the parent type to lazily initialize the child object, creating it whenever it's found to be null.
PORTABLE_LOGICAL_CHILD_MSG=You can chose to ensure that objects of this type do not enter shared object graphs. Since this object is contained by a logically-managed object, and therefore not a reference that can be managed by Terracotta, there is nothing that can be done in the configuration to disallow its sharing. If you choose not to share this object, you will need to take action in the code to ensure that this object isn't added to a shared object graph.
TRANSIENT_FIELD_MSG=This is transient field that will not be shared.
EXTENDS_LOGICALLY_MANAGED_TYPE_MSG=This type extends a logically-managed type in such a way that it cannot be portable. Extensions of logically-managed types cannot override protected methods.
ISSUE_DETAILS=Issue Details
RESOLUTIONS=Resolutions
ACTIONS=Actions
TAKE_NO_ACTION=Take no action
ACTIONS_TO_TAKE=Actions to take
SELECTED_ACTION=Selected action
MAKE_PORTABLE=Make portable
DO_NOT_SHARE=Don't share
INCLUDE_TYPE_FOR_SHARING=Include type for sharing
INCLUDE_PACKAGE_FOR_SHARING=Include package for sharing
ADD_TO_BOOTJAR=Add to bootjar
INCLUDE_PATTERN=Include pattern
HONOR_TRANSIENT=Honor transient
ON_LOAD=On Load
DO_NOTHING=Do nothing
CALL_METHOD=Call method
EXECUTE_CODE=Execute code
INCLUDE_BASE_TYPES=Include base types
BASE_TYPES_TO_INCLUDE=Base types to include
TYPES_TO_ADD_TO_BOOTJAR=Types to add to BootJar:
TYPES_TO_INCLUDE=Types to be included for instrumentation:
