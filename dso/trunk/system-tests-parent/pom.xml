<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.terracotta</groupId>
    <artifactId>terracotta-root</artifactId>
    <version>4.3.0-SNAPSHOT</version>
    <relativePath>..</relativePath>
  </parent>

  <artifactId>system-tests-parent</artifactId>
  <packaging>pom</packaging>

  <name>System Tests Parent</name>
  <description>Parent POM for system tests</description>

  <licenses>
    <license>
      <name>Terracotta Public License</name>
      <url>http://www.terracotta.org/license.txt</url>
    </license>
  </licenses>

  <properties>
    <group>system</group>
    <tcmaven.version>1.13.0-SNAPSHOT</tcmaven.version>
    <terracotta.core.version>4.3.0-SNAPSHOT</terracotta.core.version>
    <tc.core.artifactId>terracotta</tc.core.artifactId>
    <productKeyPath/>
    <ee.license>-Dcom.tc.productkey.path=${productKeyPath}</ee.license>
    <container-test-framework.version>2.0.0</container-test-framework.version>

    <tc.tests.configuration.properties.file>${project.build.testOutputDirectory}/tc.tests.properties</tc.tests.configuration.properties.file>
    <tc.system.tests.properties>${project.build.testOutputDirectory}/com/tc/properties/tests.properties</tc.system.tests.properties>

    <hamcrest.version>1.3</hamcrest.version>
    <surefire.version>2.15</surefire.version>
    <gmaven-plugin.version>1.5</gmaven-plugin.version>
    <cargo-maven2-plugin.version>1.0.3</cargo-maven2-plugin.version>
    <tc.linked-child-process.version>1.0.8</tc.linked-child-process.version>
    <maven-appserver-plugin.version>1.0.5</maven-appserver-plugin.version>
    <gmavenProviderSelection>2.0</gmavenProviderSelection>
    <tc.config>-Dtc.config=tc-config.xml</tc.config>
    <tc.base-dir>${project.build.directory}</tc.base-dir>
    <tc.dso.globalmode>false</tc.dso.globalmode>

    <tc.tests.info.property-files>${tc.tests.configuration.properties.file}</tc.tests.info.property-files>
    <tc.tests.info.temp-root>${project.build.directory}/temp</tc.tests.info.temp-root>
    <tc.tests.info.data-root>${project.build.directory}/data</tc.tests.info.data-root>
    <tc.tests.info.linked-child-process-classpath>${localMavenRepository}/org/terracotta/linked-child-process/${tc.linked-child-process.version}/linked-child-process-${tc.linked-child-process.version}.jar</tc.tests.info.linked-child-process-classpath>
    <tc.tests.info.junit-test-timeout-inseconds>1800</tc.tests.info.junit-test-timeout-inseconds>
    <absolute-test-timeout-secs>${tc.tests.info.junit-test-timeout-inseconds}</absolute-test-timeout-secs><!-- use this to control the final timeout value for all unit tests -->
    <tc.tests.info.l2.startup.mode>internal</tc.tests.info.l2.startup.mode>
    <jrockit-jvm-arguments/>
    <surefire.min-memory>64m</surefire.min-memory>
    <surefire.max-memory>128m</surefire.max-memory>
    <surefire.additional-jvm-args/>
    <surefire.argLine>-server -Xms${surefire.min-memory} -Xmx${surefire.max-memory} ${surefire.additional-jvm-args} ${jrockit-jvm-arguments} -Dtc.base-dir=${tc.base-dir} ${tc.config} -Dtc.dso.globalmode=${tc.dso.globalmode} -Dtc.tests.info.property-files=${tc.tests.info.property-files} -Dcom.tc.properties=${tc.system.tests.properties} -Dcom.sun.management.jmxremote ${ee.license}</surefire.argLine>
    <skipTests>true</skipTests>

    <!--
        Unfortunately, this silly localMavenRepository property is necessary
        because we have to treat it specially on Windows and set it to
        C:\DOCUME~1\${user.name}\.m2\repository to avoid spaces in the path
        (see the container-tests-windows profile definition).
    -->
    <localMavenRepository>${user.home}/.m2/repository</localMavenRepository>
    <os-classifier>linux</os-classifier>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.terracotta</groupId>
        <artifactId>terracotta</artifactId>
        <version>${terracotta.core.version}</version>
      </dependency>
      <dependency>
        <groupId>org.terracotta</groupId>
        <artifactId>terracotta-ee</artifactId>
        <version>${terracotta.core.version}</version>
      </dependency>
      <dependency>
        <groupId>org.terracotta</groupId>
        <artifactId>linked-child-process</artifactId>
        <version>${tc.linked-child-process.version}</version>
      </dependency>
      <dependency>
        <groupId>org.terracotta.test</groupId>
        <artifactId>container-test-framework</artifactId>
        <version>${container-test-framework.version}</version>
      </dependency>
      <dependency>
        <groupId>org.terracotta.test</groupId>
        <artifactId>test-framework</artifactId>
        <version>${terracotta.core.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.terracotta</groupId>
      <artifactId>${tc.core.artifactId}</artifactId>
    </dependency>
    <dependency>
      <groupId>org.terracotta</groupId>
      <artifactId>linked-child-process</artifactId>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>1.9.5</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.hamcrest</groupId>
          <artifactId>hamcrest-core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>    
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.hamcrest</groupId>
          <artifactId>hamcrest-core</artifactId>
          </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.terracotta.test</groupId>
      <artifactId>test-framework</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.terracotta.junit</groupId>
      <artifactId>test-listeners</artifactId>
      <version>1.0.1</version>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
      </resource>
      <resource>
        <directory>src/main/filtered-resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>false</filtering>
      </testResource>
      <testResource>
        <directory>src/test/filtered-resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.codehaus.cargo</groupId>
          <artifactId>cargo-maven2-plugin</artifactId>
          <version>${cargo-maven2-plugin.version}</version>
        </plugin>
        <plugin>
          <!-- we include the surefire plugin to get a known version and to always tell
               it to skip tests. The toolkit resolver plugin is the actual thing that runs
               tests -->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${surefire.version}</version>
          <configuration>
            <skipTests>true</skipTests>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.terracotta</groupId>
          <artifactId>maven-forge-plugin</artifactId>
          <version>${maven-forge-plugin.version}</version>
          <configuration>
            <skipTests>true</skipTests>
          </configuration>
          <executions>
            <execution>
              <id>default-test</id>
              <phase>integration-test</phase>
              <goals>
                <goal>test</goal>
              </goals>
              <configuration>
                <skipTests>${skipTests}</skipTests>
                <forkMode>always</forkMode>
                <printSummary>true</printSummary>
                <forkedProcessTimeoutInSeconds>${absolute-test-timeout-secs}</forkedProcessTimeoutInSeconds>
                <useSystemClassLoader>true</useSystemClassLoader>
                <workingDirectory>${project.build.directory}</workingDirectory>
                <argLine>${surefire.argLine}</argLine>
                <excludes>
                  <exclude>**/Abstract*.java</exclude>
                </excludes>
                <properties>
                  <property>
                    <name>listener</name>
                    <value>net.sf.ehcache.SystemExitListener</value>
                  </property>
                </properties>
              </configuration>
            </execution>
            <execution>
              <id>setl2classpath</id>
              <phase>process-test-resources</phase>
              <goals>
                <goal>setl2classpath</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.codehaus.gmaven</groupId>
          <artifactId>gmaven-plugin</artifactId>
          <version>${gmaven-plugin.version}</version>
          <configuration>
            <providerSelection>${gmavenProviderSelection}</providerSelection>
            <sourceEncoding>UTF-8</sourceEncoding>
          </configuration>
          <executions>
            <execution>
              <id>generate-test-properties</id>
              <phase>process-test-resources</phase>
              <goals>
                <goal>execute</goal>
              </goals>
              <configuration>
                <source><![CDATA[
                  Properties outputProperties = new Properties()
                  project.properties.each { key, value ->
                    if (key.startsWith("tc.tests")) {
                      outputProperties.setProperty(key, value)
                    }
                  }

                  String propertiesFileName = project.properties.getProperty(
                      "tc.tests.configuration.properties.file")
                  File propertiesFile = new File(propertiesFileName)
                  assert !propertiesFile.isDirectory()
                  propertiesFile.parentFile.mkdirs()
                  def outputStream = new FileOutputStream(propertiesFile)
                  try {
                    outputProperties.store(outputStream, "")
                  }
                  finally {
                    outputStream.close()
                  }
                  ]]></source>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>2.8</version>
          <executions>
            <execution>
              <id>build-full-classpath</id>
              <phase>integration-test</phase>
              <goals>
                <goal>build-classpath</goal>
              </goals>
              <configuration>
                <outputFile>${project.build.directory}/classpath.txt</outputFile>
              </configuration>
            </execution>
            <execution>
              <id>build-compile-classpath</id>
              <phase>integration-test</phase>
              <goals>
                <goal>build-classpath</goal>
              </goals>
              <configuration>
                <includeScope>compile</includeScope>
                <outputFile>${project.build.directory}/compile-classpath.txt</outputFile>
              </configuration>
            </execution>
            <execution>
              <id>build-test-classpath</id>
              <phase>integration-test</phase>
              <goals>
                <goal>build-classpath</goal>
              </goals>
              <configuration>
                <includeScope>test</includeScope>
                <outputFile>${project.build.directory}/test-classpath.txt</outputFile>
              </configuration>
            </execution>
            <execution>
              <id>build-runtime-classpath</id>
              <phase>compile</phase>
              <goals>
                <goal>build-classpath</goal>
              </goals>
              <configuration>
                <includeScope>runtime</includeScope>
                <outputFile>${project.build.directory}/runtime-classpath.txt</outputFile>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.servicemix.tooling</groupId>
                    <artifactId>depends-maven-plugin</artifactId>
                    <versionRange>[1.2,)</versionRange>
                    <goals>
                      <goal>generate-depends-file</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore/>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.terracotta</groupId>
        <artifactId>maven-forge-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.2</version>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>workaround-windows</id>
      <activation>
        <os><family>windows</family></os>
      </activation>
      <properties>
        <localMavenRepository>C:\DOCUME~1\${user.name}\.m2\repository</localMavenRepository>
        <os-classifier>windows</os-classifier>
      </properties>
    </profile>

    <profile>
      <id>enable-system-gc-jrockit</id>
      <activation>
        <property>
          <name>java.vm.name</name>
          <value>Oracle JRockit(R)</value>
        </property>
      </activation>
      <properties>
        <jrockit-jvm-arguments>-XXfullSystemGC</jrockit-jvm-arguments>
      </properties>
    </profile>

    <profile>
      <id>container-debug</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.terracotta</groupId>
            <artifactId>maven-forge-plugin</artifactId>
            <configuration>
              <printSummary>true</printSummary>
              <reportFormat>plain</reportFormat>
              <systemProperties>
                <property>
                  <name>com.tc.test.server.appserver.deployment.GenericServer.ENABLE_DEBUGGER</name>
                  <value>true</value>
                </property>
                <property>
                  <name>tc.classloader.writeToDisk</name>
                  <value>true</value>
                </property>
              </systemProperties>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>ee</id>
      <properties>
        <tc.core.artifactId>terracotta-ee</tc.core.artifactId>
        <skipTests>false</skipTests>
      </properties>
    </profile>

    <profile>
      <id>check-short</id>
      <properties>
        <should_skip_tests>false</should_skip_tests>
      </properties>     
      <build>
        <plugins>
          <plugin>
            <groupId>org.reflections</groupId>
            <artifactId>reflections-maven</artifactId>
            <version>0.9.9-RC1</version>
            <configuration>
              <scanners>org.reflections.scanners.TypeAnnotationsScanner</scanners>
              <destinations>${project.build.directory}/reflections.xml</destinations>
              <tests>true</tests>
              <parallel>true</parallel>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>reflections</goal>
                </goals>
                <phase>process-test-classes</phase>
              </execution>
            </executions>
          </plugin>        
          <plugin>
            <groupId>org.terracotta</groupId>
            <artifactId>maven-forge-plugin</artifactId>
            <configuration>
              <useReflectionFile>true</useReflectionFile>
              <groups>org.terracotta.test.categories.CheckShorts</groups>
              <failIfNoTests>false</failIfNoTests>
              <printSummary>true</printSummary>
              <reportFormat>plain</reportFormat>              
            </configuration>
          </plugin>
        </plugins>      
      </build>
    </profile>

    <profile>
      <id>single-server</id>
      <properties>
        <should_skip_tests>false</should_skip_tests>
        <tc.tests.info.standalone>true</tc.tests.info.standalone>
        <tc.tests.info.tsa.port>9910</tc.tests.info.tsa.port>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.terracotta.maven.plugins</groupId>
            <artifactId>tc-maven-plugin</artifactId>
            <version>${tcmaven.version}</version>
            <dependencies>
              <dependency>
                <groupId>org.terracotta</groupId>
                <artifactId>terracotta-ee</artifactId>
                <version>${terracotta.core.version}</version>
              </dependency>
              <dependency>
                <groupId>org.terracotta.qa</groupId>
                <artifactId>license-wrapper</artifactId>
                <version>1.0.0-SNAPSHOT</version>
              </dependency>
            </dependencies>
            <executions>
              <execution>
                <id>server1start</id>
                <phase>pre-integration-test</phase>
                <configuration>
                  <serverName>Server1</serverName>
                  <config>${project.build.directory}/test-classes/tc-config-single-server.xml</config>
                  <jvmargs>-Dlogs.path=${project.build.directory}/temp -Xms1g -Xmx1g</jvmargs>
                </configuration>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>server1stop</id>
                <phase>post-integration-test</phase>
                <configuration>
                  <serverName>Server1</serverName>
                  <config>${project.build.directory}/test-classes/tc-config-single-server.xml</config>
                  <jvmargs>-Dlogs.path=${project.build.directory}/temp -Xms1g -Xmx1g</jvmargs>
                </configuration>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <startServer>false</startServer>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.reflections</groupId>
            <artifactId>reflections-maven</artifactId>
            <version>0.9.9-RC1</version>
            <configuration>
              <scanners>org.reflections.scanners.TypeAnnotationsScanner</scanners>
              <destinations>${project.build.directory}/reflections.xml</destinations>
              <tests>true</tests>
              <parallel>true</parallel>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>reflections</goal>
                </goals>
                <phase>process-test-classes</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.terracotta</groupId>
            <artifactId>maven-forge-plugin</artifactId>
            <configuration>
              <groups>org.terracotta.test.categories.SingleServer</groups>
              <failIfNoTests>false</failIfNoTests>
              <printSummary>true</printSummary>
              <reportFormat>plain</reportFormat>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>container-tests</id>
      <activation>
        <property>
          <name>appserver</name>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.terracotta.test</groupId>
          <artifactId>websphere-profiles</artifactId>
          <classifier>${os-classifier}</classifier>
          <version>1.0</version>
          <type>tar.gz</type>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <!-- increase websphere test timeout to 2700 seconds (45 minutes) -->
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <version>${gmaven-plugin.version}</version>
            <executions>
              <execution>
                <id>modify-websphere-tests-timeout</id>
                <phase>generate-test-resources</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <source><![CDATA[
                    import org.apache.maven.artifact.Artifact
                    if (project.properties['appserver'] =~ /websphere/) {
                      project.properties.setProperty('tc.tests.info.junit-test-timeout-inseconds', '2700')
                      project.properties.setProperty('absolute-test-timeout-secs', '2700')
                      def cacheDir = System.getProperty("user.home") + File.separator + ".tc"
                      if (System.getProperty("os.name") =~ /Windows/) {
                        cacheDir = "c:/temp"
                      }
                      def cacheVersion = "unknown"
                      def artifactVersionFile = new File(cacheDir, "websphere-profiles.version")
                      if (artifactVersionFile.exists()) {
                        cacheVersion = artifactVersionFile.text
                      }                        
                      for (def a : project.getArtifacts()) {
                        if (a.artifactId == "websphere-profiles" && !cacheVersion.equals(a.version)) {
                          ant.untar(src: a.getFile(), dest: cacheDir, compression: "gzip")
                          artifactVersionFile.write(a.version)
                        }
                      }
                    }
                    ]]>
                  </source>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.terracotta.plugin</groupId>
            <artifactId>maven-appserver-plugin</artifactId>
            <version>${maven-appserver-plugin.version}</version>
            <executions>
              <execution>
                <id>install-appserver</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>setup</goal>
                </goals>
                <configuration>
                  <url>
                    <param>http://download.terracotta.org/appservers</param>
                    <param>http://sfo-c64-jenkins-tools-001.eur.ad.sag/resources/appservers</param>
                  </url>
                  <testPropertiesFile>${tc.tests.configuration.properties.file}</testPropertiesFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>run-test-group</id>
      <properties>
        <skipTests>false</skipTests>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.terracotta</groupId>
            <artifactId>maven-forge-plugin</artifactId>
            <configuration>
              <printSummary>true</printSummary>
              <reportFormat>plain</reportFormat>
              <excludes>
                <exclude>**/Abstract*.java</exclude>
              </excludes>
              <includes>
                <include>**/${testGroup}/*Test.java</include>
              </includes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>client-jvm</id>
      <properties>
        <surefire.jvm.mode>-client</surefire.jvm.mode>
      </properties>
    </profile>
    <profile>
      <id>server-jvm</id>
      <properties>
        <surefire.jvm.mode>-server</surefire.jvm.mode>
      </properties>
    </profile>

    <profile>
      <id>check</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <version>${gmaven-plugin.version}</version>
            <executions>
              <execution>
                <id>decide-which-group-should-run-tests</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <source>
                    def target = project.properties['target']
                    if (target == null) fail("-Dtarget needs to be set for this profile")
                    def targetSet = new HashSet(Arrays.asList(target.split(",")))
                    def projectGroups = new HashSet()
                    if (project.properties['group'] != null) {
                      projectGroups.addAll(Arrays.asList(project.properties['group'].split(",")))
                    }
                    targetSet.retainAll(projectGroups)
                    def shouldSkipTest = targetSet.size() == 0
                    project.properties.should_skip_tests = String.valueOf(shouldSkipTest)
                  </source>
                </configuration>
              </execution>
            </executions>
          </plugin>         
        </plugins>          
      </build>
    </profile>    

    <profile>
      <id>system-tests</id>
      <properties>
        <skipTests>false</skipTests>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.terracotta</groupId>
            <artifactId>maven-forge-plugin</artifactId>
            <configuration>
              <printSummary>true</printSummary>
              <reportFormat>plain</reportFormat>
              <excludes>
                <exclude>**/Abstract*.java</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>    
  </profiles>

  <repositories>
    <repository>
      <id>terracotta-snapshots</id>
      <url>http://www.terracotta.org/download/reflector/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>terracotta-releases</id>
      <url>http://www.terracotta.org/download/reflector/releases</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>jboss-public</id>
      <url>http://repository.jboss.org/nexus/content/groups/public</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>terracotta-snapshots</id>
      <url>http://www.terracotta.org/download/reflector/snapshots</url>
    </pluginRepository>
    <pluginRepository>
      <id>terracotta-releases</id>
      <url>http://www.terracotta.org/download/reflector/releases</url>
    </pluginRepository>
  </pluginRepositories>

</project>
